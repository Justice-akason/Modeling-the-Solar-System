# Planetary Query System

## Table of Contents
- [Executive Summary](#executive-summary)
- [Introduction](#introduction)
- [System Design and Methodology](#system-design-and-methodology)
  - [1. Planet Class](#1-planet-class)
  - [2. Planetary Data Dictionary](#2-planetary-data-dictionary)
  - [3. Query Processing Function](#3-query-processing-function)
  - [4. Special Handling for Pluto](#4-special-handling-for-pluto)
  - [5. Continuous Interaction Loop](#5-continuous-interaction-loop)
- [Key Features](#key-features)
- [Conclusion](#conclusion)
- [Future Improvements](#future-improvements)
- [License](#license)

---

## Executive Summary

The **Planetary Query System** is a Python-based command-line application designed to provide users with accurate and flexible access to planetary data from our solar system. The program supports natural language queries about planetary mass, distance from the Sun, and known moons. By implementing object-oriented design, regular expression parsing, and a responsive query loop, the system delivers consistent and user-friendly results.

---

## Introduction

Understanding planetary data in an accessible way is important for both education and curiosity-driven exploration. This project was developed to meet that need by allowing users to ask natural-language questions about planets in the solar system and receive structured, factual responses.

The core goals of the project were to:

- Create a flexible, user-centered planetary information system.
- Provide accurate planetary data using structured storage.
- Enable support for varied phrasing and minor user input errors.

---

## System Design and Methodology

### 1. Planet Class

The project defines a `Planet` class that encapsulates the attributes of each celestial body. Each instance stores:

- Planet name
- Mass
- Distance from the Sun
- List of moons

The class includes getter methods such as `get_name()`, `get_mass()`, and others to allow safe and modular data retrieval.

This structure ensures each planet’s data is organized, reusable, and easily accessible for query operations.

---

### 2. Planetary Data Dictionary

Rather than initializing individual objects per query, all planetary data is stored in a centralized dictionary. Each planet is represented by a key (its name), with its corresponding data—mass, distance, and moons—stored as values.

This approach allows efficient lookup and ensures the dataset is easy to update, debug, and extend.

---

### 3. Query Processing Function

The core of the system is the `query_planet()` function, which interprets user input and returns relevant information. To ensure flexibility:

- Input is converted to lowercase to reduce case sensitivity.
- Regular expressions (`re.search`) are used to detect various phrasings and synonyms.

For example, the following queries are interpreted equivalently:

- “How massive is Jupiter?”
- “What is the mass of Jupiter?”
- “How heavy is Jupiter?”

All return:  
**“The mass of Jupiter is 1.8982×10²⁷ kg.”**

This methodology ensures that varied natural-language inputs can be handled with high accuracy.

---

### 4. Special Handling for Pluto

Due to Pluto’s unique classification status, the system includes a dedicated response for Pluto-related queries. When users ask questions like:

- “Is Pluto a planet?”
- “Does Pluto exist in the database?”

The system replies:  
**“Pluto is classified as a dwarf planet.”**

It then displays Pluto’s attributes, ensuring clarity and scientific sensitivity.

---

### 5. Continuous Interaction Loop

The application runs an infinite loop (`while True:`), allowing users to continue making queries until they choose to exit. This design promotes a smooth and continuous user experience.

Typing **“exit”** terminates the program.

---

## Key Features

- ✅ **Natural Language Input:** Users can phrase questions in multiple ways without rigid formatting.
- ✅ **Error Tolerance:** The use of `re.search` enables recognition of varied phrasings and minor typos.
- ✅ **Data Modularity:** Planetary data is centralized, making updates or additions straightforward.
- ✅ **Extensible Design:** Separation of logic and data allows future features to be added without disrupting core functionality.
- ✅ **Safe Execution:** The use of `if __name__ == "__main__"` ensures the script only executes when intended, supporting clean importation in other modules.

---

## Conclusion

The Planetary Query System demonstrates a thoughtful application of Python principles to deliver an intuitive and educational tool. By leveraging:

- Object-oriented design (via the `Planet` class),
- Structured data storage (via dictionaries),
- Flexible query handling (via regular expressions),
- And an interactive command loop,

the system creates an approachable and intelligent interface for exploring the solar system. Its modularity and responsiveness make it a strong foundation for further enhancements such as GUI integration or API support.

---

## Future Improvements

Possible future enhancements could include:

- Adding planetary images or diagrams.
- Integrating with live astronomical data sources.
- Expanding the dataset to include additional celestial objects.
- Implementing a graphical interface for non-technical users.

---

## License

This project is provided for educational and demonstration purposes. Please contact me for permissions or collaboration inquiries.

---
